@page "/"
@inject IJSRuntime JsRuntime


<PageTitle>Index</PageTitle>
@if (!string.IsNullOrEmpty(errorMessage))
{
    @errorMessage
}
else
{
    <video @ref="VideoElementRef" muted autoplay playsinline>
        Video Gelecek
    </video>
    <button class="btn btn-success" id="btnPicture" @onclick="OnTakePicture">Take Picture</button>
}

<br/>
<input type="file" OnChange="@OnTakePicture" accept="image/*" capture>
<img src="@capturedimage" width="100" height="outo" />
<canvas @ref="CanvasRef" id="currentFrame" />

@code {

    private ElementReference VideoElementRef { get; set; }
    private ElementReference CanvasRef { get; set; }
    private string errorMessage = "";
    private string jsModulePath = "./js/camhelper.js";
    private Task<IJSObjectReference> moduleRef;
    static string capturedimage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            moduleRef = JsRuntime.InvokeAsync<IJSObjectReference>("import", jsModulePath).AsTask();
            var module = await moduleRef;
            await module.InvokeVoidAsync("init", VideoElementRef, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnSuccess()
    {
        StateHasChanged();

    }
    [JSInvokable]
    public void onFailure(string e)
    {
        errorMessage = e.Replace("Requested device not found", "Bu cihazın kamerası yok. Bu yüzden tarama işlemi yapamazsınız.");

        StateHasChanged();
    }

    [JSInvokable]
    public async void OnTakePicture(object data)
    {
        var module = await moduleRef;
        capturedimage = await module.InvokeAsync<string>("getBase64Img", VideoElementRef, CanvasRef);
        StateHasChanged();
    }
}

