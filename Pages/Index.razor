@page "/"
@inject IJSRuntime JsRuntime


<PageTitle>Index</PageTitle>

<h3>QrCode Oku</h3>

<video @ref="VideoHtmlElement">
    Video Gelecek
</video>

<button @onclick="makefoto" class="btn">foto çek</button>
<img src="@bild" />
<script>
    function docReady(fn) {
        // see if DOM is already available
        if (document.readyState === "complete"
            || document.readyState === "interactive") {
            // call on next available tick
            setTimeout(fn, 1);
        } else {
            document.addEventListener("DOMContentLoaded", fn);
        }
    }

    docReady(function () {
        var resultContainer = document.getElementById('qr-reader-results');
        var lastResult, countResults = 0;
        function onScanSuccess(decodedText, decodedResult) {
            if (decodedText !== lastResult) {
                ++countResults;
                lastResult = decodedText;
                // Handle on success condition with the decoded message.
                console.log(`Scan result ${decodedText}`, decodedResult);
            }
        }

        var html5QrcodeScanner = new Html5QrcodeScanner(
            "qr-reader", { fps: 10, qrbox: 250 });
        html5QrcodeScanner.render(onScanSuccess);
    });
</script>
@code {

    //https://blog.ppedv.de/post/Blazor-WASM-QRCode-Reader
    Task<IJSObjectReference> moduleTask;
    public ElementReference VideoHtmlElement { get; set; }
    static string bild;
    private static Action RefreshUI;

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         moduleTask = JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/camhelper.js").AsTask();
    //         var module = await moduleTask;
    //         await module.InvokeVoidAsync("initialize", VideoHtmlElement, DotNetObjectReference.Create(this));
    //     }
    // }

    // [JSInvokable]
    // public void OnWebCameraError(string error)
    // {

    // }

    public async void makefoto()
    {
        var module = await moduleTask;
        bild = await module.InvokeAsync<string>("getBase64Img");
        StateHasChanged();
    }

    // [JSInvokable]
    // public static async Task OnFrameArrived(string _bild)
    // {
    //     // FrameCount++;
    //     // bild = _bild; //QrCode todo
    //     // RefreshUI += () => StateHasChanged();
    //     // RefreshUI?.Invoke();
    // }
}

